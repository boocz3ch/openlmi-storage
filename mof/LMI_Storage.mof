[ Abstract, Description("Generic raw block device - not consumable by applications (=filesystems). E.g. a partitioned disk - only the partitions themselves can be used by the OS.")]
class LMI_StorageExtent: CIM_StorageExtent
{
};

[ Description("Local disk, which can be either partitioned or directly formatted.")]
class LMI_LocalDiskExtent: LMI_StorageExtent
{
};

[ Description("Block device consumable by applications (=filesystems).")]
class LMI_LogicalDisk : CIM_LogicalDisk
{
};

[Association]
class LMI_LogicalDiskBasedOn : CIM_BasedOn
{
};

[Association]
class LMI_LogicalDiskAllocatedFromStoragePool : CIM_AllocatedFromStoragePool
{
};


[Association]
class LMI_HostedStorageService : CIM_HostedService
{
};

[Association]
class LMI_SystemStorageDevice : CIM_SystemDevice
{
};

[Association]
class LMI_HostedStoragePool : CIM_HostedStoragePool
{
};

[Abstract]
class LMI_StorageCapabilities : CIM_StorageCapabilities
{
    [ Description(
        "Allocation Type describes if StoragePool can be used only as whole"
        " (One; typically Linux MD RAID, encrypted volume etc.) or several"
        " LogicalDisks can be allocated from it (Multiple; typically Volume"
        " Group)."),
    ValueMap {"0", "1", "2..32767"},
    Values {"Multiple", "One"}]
    uint16 LMIAllocationType;
};

class LMI_StorageSetting : CIM_StorageSetting
{
    [ Description(
        "Allocation Type describes if StoragePool can be used only as whole"
        " (One; typically Linux MD RAID, encrypted volume etc.) or several"
        " LogicalDisks can be allocated from it (Multiple; typically Volume"
        " Group). If NULL is used, the implementation chooses the best suitable,"
        " e.g. 'One' when redundancy is requested (=RAID) or 'Multiple' when"
        " no redundancy is needed. Therefore VolumeGroup will be used instead"
        " of RAID0 array by default."),
    ValueMap {"0", "1", "2..32767"},
    Values {"Multiple", "One"}]
    uint16 LMIAllocationType;
};


/***************************************************
 *   File systems
 ***************************************************/

[ Description("Local file system")]
class LMI_LocalFileSystem: CIM_LocalFileSystem
{
};

[ Description("OpenLMI FileSystemConfigurationService instrumentation. It includes capability to mount a filesystem.")]
class LMI_FileSystemConfigurationService : CIM_FileSystemConfigurationService
{
    [Description("Mount a filesystem to given location."),
    ValueMap {"0", "1", "2", "3..32767"},
    Values {"Completed OK", "Not Supported", "Failed", "Reserved"}]
    uint32 MountFileSystem(
            [IN, Description ("File system to mount.")]
            CIM_FileSystem REF TheElement,
            [IN, Description ("Mount point.")]
            string Where);
};

class LMI_ResidesOnExtent : CIM_ResidesOnExtent
{
};

/***************************************************
 *   Partitioning
 ***************************************************/

[ Description("A LogicalDisk representing storage on a disk partition."
    " In most cases it represents the same storage as underlying"
    " LMI_DiskPartition. When the underlying partition is a logical"
    " partition, this extent represents real data usable by system, while"
    " the LMI_DiskPartition represents the partition including its metadata."
    ""
    " It is a LogicalDisk because of Disk Partition Subprofile, it mandates that"
    " every DiskPartition must have a LogicalDisk.")]
class LMI_PartitionExtent: CIM_LogicalDisk
{
};

[ Description("A MBR partition. This includes primary, extended and logical partitions.")]
class LMI_DiskPartition: CIM_DiskPartition
{
};

[ Description("A GPT partition.")]
class LMI_GPTDiskPartition: CIM_GPTDiskPartition
{
};

[ Description("OpenLMI Linux partition configuration capabilities.")]
class LMI_DiskPartitionConfigurationCapabilities : CIM_DiskPartitionConfigurationCapabilities
{
};

[ Description("OpenLMI DiskParitionConfigurationService instrumentation. The partitions MUST be alligned to LMI_DiskPartitionConfigurationCapabilities.Alignment blocks.")]
class LMI_DiskPartitionConfigurationService : CIM_DiskPartitionConfigurationService
{
};

[Association, Description("Association between logical partitions and its extended partition.")]
class LMI_PartitionBasedOnPartition : CIM_BasedOn
{
};

[Association, Description("Association between local disk and partitions on it.")]
class LMI_PartitionBasedOnLocalDiskExtent : CIM_BasedOn
{
};

[Association, Description("Association between DiskPartitionConfigurationCapabilities and DiskPartitionConfigurationService.")]
class LMI_PartitionElementCapabilities : CIM_ElementCapabilities
{
};

[Association]
class LMI_InstalledParititionTable : CIM_InstalledPartitionTable
{
};

[Association]
class LMI_PartitionExtentBasedOnPartition : CIM_LogicalDiskBasedOnPartition
{
};

/***************************************************
 *   RAID
 ***************************************************/

[ Description("RAID composite extent. Represent data of a RAID. Can be either exposed to OS (via LogicalDisk) or consumed by another pool (e.g. LVM based on RAID).")]
class LMI_RAIDCompositeExtent : CIM_CompositeExtent
{
};

[ Description("RAID pool. Auxiliary object, just to satisfy SMI-S.")]
class LMI_RAIDPool : CIM_StoragePool
{
};

[Association]
class LMI_RAIDCompositeExtentBasedOn : CIM_CompositeExtentBasedOn
{
};

[Association]
class LMI_RAIDAllocatedFromStoragePool : CIM_AllocatedFromStoragePool
{
};

[Association]
class LMI_AssociatedRAIDComponentExtent : CIM_AssociatedComponentExtent
{
};


class LMI_RAIDStorageCapabilities : LMI_StorageCapabilities
{
};

[Association]
class LMI_RAIDStorageElementCapabilities : CIM_ElementCapabilities
{
};

/***************************************************
 *   Primordial Pool & stuff
 ***************************************************/

[ Description("The primordial pool. Auxiliary object, just to satisfy SMI-S.")]
class LMI_PrimordialPool : CIM_StoragePool
{
};

[Association]
class LMI_AssociatedPrimordialExtent : CIM_AssociatedComponentExtent
{
};

class LMI_PrimordialStorageCapabilities : LMI_StorageCapabilities
{
};

[Association]
class LMI_PrimordialStorageElementCapabilities : CIM_ElementCapabilities
{
};


/***************************************************
 *   Storage configuration & capabilities
 ***************************************************/

class LMI_StorageConfigurationService : CIM_StorageConfigurationService
{
    [Description(
        "Create RAID with given local disks and format it as ext3. "
        "This function creates GPT partition table on the disks and creates "
        "one huge partition on each of them. The partitions are then added to "
        "RAID array."),
    ValueMap {"0", "1", "2", "3..32767"},
    Values {"Completed OK", "Not Supported", "Failed", "Reserved"}]
    uint32 CreateRaid(
            [IN, Description(
                "Array of strings containing representations of "
                "references to LMI_LocalDiskExtent instances, that "
                "are used to create the Pool or modify the source "
                "extents." )]
            string InExtents[],
        
            [IN, Description("Desired RAID type."),
                ValueMap {"0", "1", "5"},
                Values {"RAID0", "RAID1", "RAID5"}]
            uint16 RaidType,
            
            [IN (false), OUT, Description("Created LogicalDisk.")]
            CIM_LogicalDisk REF Disk,
            
            [IN (false), OUT, Description("Created filesystem.")]
            CIM_LocalFileSystem REF FilesyStem
    );
};

class LMI_GlobalStorageConfigurationCapabilities : CIM_StorageConfigurationCapabilities
{
};

[Association]
class LMI_GlobalStorageConfigurationElementCapabilities : CIM_ElementCapabilities
{

};


/***************************************************
 *   LVM Volume Groups
 ***************************************************/
[ Description("Volume Group composite extent. Represent data of a Volume Group.")]
class LMI_VGCompositeExtent : CIM_CompositeExtent
{
};

[ Description("Volume Group pool. Auxiliary object, just to satisfy SMI-S.")]
class LMI_VGPool : CIM_StoragePool
{
};

[Association]
class LMI_VGCompositeExtentBasedOn : CIM_CompositeExtentBasedOn
{
};

[Association]
class LMI_VGAllocatedFromStoragePool : CIM_AllocatedFromStoragePool
{
};

[Association]
class LMI_AssociatedVGComponentExtent : CIM_AssociatedComponentExtent
{
};


class LMI_VGStorageCapabilities : LMI_StorageCapabilities
{
};

[Association]
class LMI_VGStorageElementCapabilities : CIM_ElementCapabilities
{
};

/***************************************************
 *   LVM
 ***************************************************/
[ Description("Logical Volume. This extent can be used in"
  " StorageConfigurationService.CreatePool as InExtent to create another"
  " StorageExtent on top of a Logical Volume.")]
class LMI_LVLogicalDisk : CIM_LogicalDisk
{
};

[Association]
class LMI_LVLogicalDiskBasedOn : CIM_BasedOn
{
};

[Association]
class LMI_LVAllocatedFromStoragePool : CIM_AllocatedFromStoragePool
{
};
